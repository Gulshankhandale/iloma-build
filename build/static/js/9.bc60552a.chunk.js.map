{"version":3,"sources":["components/uielements/popover.js","components/Notification.js","components/ColorChooser.style.js","library/helpers/history.js","config/auth0.config.js","containers/Authentication/Auth0/Auth0.js","containers/Authentication/Auth0/Auth0Callback.js"],"names":["createNotification","type","message","description","notification","ColorChooserDropdown","styled","div","props","borderRadius","WithDirection","createBrowserHistory","forceRefresh","clientID","domain","allowedConnections","rememberLastLogin","language","closable","options","auth","autoParseHash","responseType","redirect","redirectUrl","languageDictionary","title","emailInputPlaceholder","passwordInputPlaceholder","theme","labeledSubmitButton","logo","primaryColor","authButtons","connectionName","displayName","foregroundColor","Auth0","lock","Auth0Lock","Auth0Config","login","show","handleAuthentication","on","setSession","error","authResult","expiresAt","JSON","stringify","expiresIn","Date","getTime","localStorage","setItem","accessToken","idToken","history","replace","logout","removeItem","isAuthenticated","parse","getItem","EventEmitter","Auth0Callback","useEffect","authActions"],"mappings":"gIAEe,S,yFCMAA,EANY,SAACC,EAAMC,EAASC,GACzCC,EAAA,EAAaH,GAAM,CACjBC,UACAC,iB,iECFEE,EAAuBC,IAAOC,IAAV,idAWZ,SAACC,GAAD,MACc,QAAtBA,EAAM,YAAwB,aAAe,eAC7CC,YAAa,QAqBJC,YAAcL,G,6HCnCdM,cAAqB,CAClCC,cAAc,ICHD,GACbC,SAAU,iBACVC,OAAQ,mBACRC,mBAAoB,CAAC,oCACrBC,mBAAmB,EACnBC,SAAU,KACVC,UAAU,EACVC,QAAS,CACPC,KAAM,CACJC,eAAe,EACfC,aAAc,iBACdC,UAAU,EACVC,YAGM,+CAERC,mBAAoB,CAClBC,MAAO,QACPC,sBAAuB,iBACvBC,yBAA0B,YAE5BC,MAAO,CACLC,qBAAqB,EACrBC,KAAM,gBACNC,aAAc,UACdC,YAAa,CACXC,eAAgB,CACdC,YAAa,SACbH,aAAc,UACdI,gBAAiB,e,SCxBrBC,E,4MACJC,KAAO,IAAIC,IACTC,EAAY3B,SACZ2B,EAAY1B,OACZ0B,EAAYrB,S,EAGdsB,MAAQ,WACD,EAAKH,MAGV,EAAKA,KAAKI,Q,EAEZC,qBAAuB,WAErB,EAAKL,KAAKM,GAAG,gBAAiB,EAAKC,YAEnC,EAAKP,KAAKM,GAAG,uBAAuB,SAAAE,GAAK,OACvC1C,YAAa,QAAS,8B,EAG1ByC,WAAa,SAAAE,GAEX,IAAIC,EAAYC,KAAKC,UACI,IAAvBH,EAAWI,WAAmB,IAAIC,MAAOC,WAE3CC,aAAaC,QAAQ,eAAgBR,EAAWS,aAChDF,aAAaC,QAAQ,WAAYR,EAAWU,SAC5CH,aAAaC,QAAQ,aAAcP,GAEnCU,EAAQC,QAAQ,e,EAElBC,OAAS,WAEPN,aAAaO,WAAW,gBACxBP,aAAaO,WAAW,YACxBP,aAAaO,WAAW,cAExBH,EAAQC,QAAQ,M,EAGlBG,gBAAkB,WAChB,IAAId,EAAYC,KAAKc,MAAMT,aAAaU,QAAQ,cAChD,OAAO,IAAIZ,MAAOC,UAAYL,G,YA3CdiB,gBA8CL,QAAI5B,G,iCCpDnB,4CAYe6B,UATO,WAMpB,OALAC,qBAAU,WACR9B,IAAMM,uBACNyB,IAAY3B,UACX,IAEI","file":"static/js/9.bc60552a.chunk.js","sourcesContent":["import { Popover } from 'antd';\n\nexport default Popover;\n","import { notification } from 'antd';\n\nconst createNotification = (type, message, description) => {\n  notification[type]({\n    message,\n    description,\n  });\n};\nexport default createNotification;\n","import styled from 'styled-components';\nimport { borderRadius } from '@iso/lib/helpers/style_utils';\nimport WithDirection from '@iso/lib/helpers/rtl';\nconst ColorChooserDropdown = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  max-width: 160px;\n\n  .ant-btn {\n    width: 20px;\n    height: 20px;\n    border: 0;\n    outline: 0;\n    padding: 0;\n    margin: ${(props) =>\n      props['data-rtl'] === 'rtl' ? '0 0 0 15px' : '0 15px 0 0'};\n    ${borderRadius('3px')};\n\n    &:empty {\n      visibility: visible;\n    }\n\n    &:last-child {\n      margin: 0;\n    }\n\n    &:nth-child(n + 6) {\n      margin-top: 15px;\n    }\n\n    &:nth-child(5n) {\n      margin-right: 0;\n      margin-left: 0;\n    }\n  }\n`;\n\nexport default WithDirection(ColorChooserDropdown);\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory({\n  forceRefresh: true,\n});\n","export default {\n  clientID: \"your_client_id\",\n  domain: \"your_domain_name\",\n  allowedConnections: [\"Username-Password-Authentication\"],\n  rememberLastLogin: true,\n  language: \"en\",\n  closable: true,\n  options: {\n    auth: {\n      autoParseHash: true,\n      responseType: \"token id_token\",\n      redirect: true,\n      redirectUrl:\n        process.env.NODE_ENV !== \"production\"\n          ? \"http://localhost:3000/auth0loginCallback\"\n          : \"https://your_domain_name/auth0loginCallback\",\n    },\n    languageDictionary: {\n      title: \"iLoma\",\n      emailInputPlaceholder: \"demo@gmail.com\",\n      passwordInputPlaceholder: \"demodemo\",\n    },\n    theme: {\n      labeledSubmitButton: true,\n      logo: \"your_logo_url\",\n      primaryColor: \"#E14615\",\n      authButtons: {\n        connectionName: {\n          displayName: \"Log In\",\n          primaryColor: \"#b7b7b7\",\n          foregroundColor: \"#000000\",\n        },\n      },\n    },\n  },\n};\n","import { EventEmitter } from 'events';\nimport Auth0Lock from 'auth0-lock';\nimport history from '@iso/lib/helpers/history';\nimport Auth0Config from '@iso/config/auth0.config';\nimport { notification } from '@iso/components';\n\nclass Auth0 extends EventEmitter {\n  lock = new Auth0Lock(\n    Auth0Config.clientID,\n    Auth0Config.domain,\n    Auth0Config.options\n  );\n\n  login = () => {\n    if (!this.lock) {\n      return;\n    }\n    this.lock.show();\n  };\n  handleAuthentication = () => {\n    // Add callback Lock's `authenticated` event\n    this.lock.on('authenticated', this.setSession);\n    // Add callback for Lock's `authorization_error` event\n    this.lock.on('authorization_error', error =>\n      notification('error', 'Wrong mail or password')\n    );\n  };\n  setSession = authResult => {\n    // Set the time that the access token will expire at\n    let expiresAt = JSON.stringify(\n      authResult.expiresIn * 1000 + new Date().getTime()\n    );\n    localStorage.setItem('access_token', authResult.accessToken);\n    localStorage.setItem('id_token', authResult.idToken);\n    localStorage.setItem('expires_at', expiresAt);\n    // navigate to the dashboard route\n    history.replace('/dashboard');\n  };\n  logout = () => {\n    // Clear access token and ID token from local storage\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('id_token');\n    localStorage.removeItem('expires_at');\n    // navigate to the home route\n    history.replace('/');\n  };\n\n  isAuthenticated = () => {\n    let expiresAt = JSON.parse(localStorage.getItem('expiresAt'));\n    return new Date().getTime() < expiresAt;\n  };\n}\nexport default new Auth0();\n","import React, { useEffect } from 'react';\nimport Auth0 from './Auth0';\nimport authActions from '@iso/redux/auth/actions';\nconst Auth0Callback = () => {\n  useEffect(() => {\n    Auth0.handleAuthentication();\n    authActions.login();\n  }, []);\n\n  return <p>Loading ...</p>;\n};\n\nexport default Auth0Callback;\n"],"sourceRoot":""}